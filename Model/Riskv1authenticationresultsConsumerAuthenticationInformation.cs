/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Riskv1authenticationresultsConsumerAuthenticationInformation
    /// </summary>
    [DataContract]
    public partial class Riskv1authenticationresultsConsumerAuthenticationInformation :  IEquatable<Riskv1authenticationresultsConsumerAuthenticationInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationresultsConsumerAuthenticationInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Riskv1authenticationresultsConsumerAuthenticationInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationresultsConsumerAuthenticationInformation" /> class.
        /// </summary>
        /// <param name="AcsRenderingType">Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. .</param>
        /// <param name="AcsTransactionId">Unique transaction identifier assigned by the ACS to identify a single transaction. .</param>
        /// <param name="AuthenticationTransactionId">Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. .</param>
        /// <param name="AuthenticationType">Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. .</param>
        /// <param name="ChallengeCancelCode">An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK .</param>
        /// <param name="EffectiveAuthenticationType">This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). .</param>
        /// <param name="DirectoryServerErrorCode">The directory server error code indicating a problem with this transaction. .</param>
        /// <param name="DirectoryServerErrorDescription">Directory server text and additional detail about the error for this transaction. .</param>
        /// <param name="InteractionCounter">Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button. .</param>
        /// <param name="SignedParesStatusReason">Provides additional information as to why the PAResStatus has a specific value. .</param>
        /// <param name="SdkTransactionId">SDK unique transaction identifier that is generated on each new transaction. .</param>
        /// <param name="SignedPares">Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \&quot;Storing Payer Authentication Data,\&quot; page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request.  (required).</param>
        /// <param name="ThreeDSServerTransactionId">Unique transaction identifier assigned by the 3DS Server to identify a single transaction. .</param>
        /// <param name="WhiteListStatus">Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder .</param>
        /// <param name="WhiteListStatusSource">This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS .</param>
        public Riskv1authenticationresultsConsumerAuthenticationInformation(string AcsRenderingType = default(string), string AcsTransactionId = default(string), string AuthenticationTransactionId = default(string), string AuthenticationType = default(string), string ChallengeCancelCode = default(string), string EffectiveAuthenticationType = default(string), string DirectoryServerErrorCode = default(string), string DirectoryServerErrorDescription = default(string), string InteractionCounter = default(string), string SignedParesStatusReason = default(string), string SdkTransactionId = default(string), string SignedPares = default(string), string ThreeDSServerTransactionId = default(string), string WhiteListStatus = default(string), string WhiteListStatusSource = default(string))
        {
            // to ensure "SignedPares" is required (not null)
            if (SignedPares == null)
            {
                throw new InvalidDataException("SignedPares is a required property for Riskv1authenticationresultsConsumerAuthenticationInformation and cannot be null");
            }
            else
            {
                this.SignedPares = SignedPares;
            }
            this.AcsRenderingType = AcsRenderingType;
            this.AcsTransactionId = AcsTransactionId;
            this.AuthenticationTransactionId = AuthenticationTransactionId;
            this.AuthenticationType = AuthenticationType;
            this.ChallengeCancelCode = ChallengeCancelCode;
            this.EffectiveAuthenticationType = EffectiveAuthenticationType;
            this.DirectoryServerErrorCode = DirectoryServerErrorCode;
            this.DirectoryServerErrorDescription = DirectoryServerErrorDescription;
            this.InteractionCounter = InteractionCounter;
            this.SignedParesStatusReason = SignedParesStatusReason;
            this.SdkTransactionId = SdkTransactionId;
            this.ThreeDSServerTransactionId = ThreeDSServerTransactionId;
            this.WhiteListStatus = WhiteListStatus;
            this.WhiteListStatusSource = WhiteListStatusSource;
        }
        
        /// <summary>
        /// Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. 
        /// </summary>
        /// <value>Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. </value>
        [DataMember(Name="acsRenderingType", EmitDefaultValue=false)]
        public string AcsRenderingType { get; set; }

        /// <summary>
        /// Unique transaction identifier assigned by the ACS to identify a single transaction. 
        /// </summary>
        /// <value>Unique transaction identifier assigned by the ACS to identify a single transaction. </value>
        [DataMember(Name="acsTransactionId", EmitDefaultValue=false)]
        public string AcsTransactionId { get; set; }

        /// <summary>
        /// Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. 
        /// </summary>
        /// <value>Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. </value>
        [DataMember(Name="authenticationTransactionId", EmitDefaultValue=false)]
        public string AuthenticationTransactionId { get; set; }

        /// <summary>
        /// Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. 
        /// </summary>
        /// <value>Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. </value>
        [DataMember(Name="authenticationType", EmitDefaultValue=false)]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK 
        /// </summary>
        /// <value>An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK </value>
        [DataMember(Name="challengeCancelCode", EmitDefaultValue=false)]
        public string ChallengeCancelCode { get; set; }

        /// <summary>
        /// This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). 
        /// </summary>
        /// <value>This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). </value>
        [DataMember(Name="effectiveAuthenticationType", EmitDefaultValue=false)]
        public string EffectiveAuthenticationType { get; set; }

        /// <summary>
        /// The directory server error code indicating a problem with this transaction. 
        /// </summary>
        /// <value>The directory server error code indicating a problem with this transaction. </value>
        [DataMember(Name="directoryServerErrorCode", EmitDefaultValue=false)]
        public string DirectoryServerErrorCode { get; set; }

        /// <summary>
        /// Directory server text and additional detail about the error for this transaction. 
        /// </summary>
        /// <value>Directory server text and additional detail about the error for this transaction. </value>
        [DataMember(Name="directoryServerErrorDescription", EmitDefaultValue=false)]
        public string DirectoryServerErrorDescription { get; set; }

        /// <summary>
        /// Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button. 
        /// </summary>
        /// <value>Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button. </value>
        [DataMember(Name="interactionCounter", EmitDefaultValue=false)]
        public string InteractionCounter { get; set; }

        /// <summary>
        /// Provides additional information as to why the PAResStatus has a specific value. 
        /// </summary>
        /// <value>Provides additional information as to why the PAResStatus has a specific value. </value>
        [DataMember(Name="signedParesStatusReason", EmitDefaultValue=false)]
        public string SignedParesStatusReason { get; set; }

        /// <summary>
        /// SDK unique transaction identifier that is generated on each new transaction. 
        /// </summary>
        /// <value>SDK unique transaction identifier that is generated on each new transaction. </value>
        [DataMember(Name="sdkTransactionId", EmitDefaultValue=false)]
        public string SdkTransactionId { get; set; }

        /// <summary>
        /// Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \&quot;Storing Payer Authentication Data,\&quot; page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. 
        /// </summary>
        /// <value>Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \&quot;Storing Payer Authentication Data,\&quot; page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. </value>
        [DataMember(Name="signedPares", EmitDefaultValue=false)]
        public string SignedPares { get; set; }

        /// <summary>
        /// Unique transaction identifier assigned by the 3DS Server to identify a single transaction. 
        /// </summary>
        /// <value>Unique transaction identifier assigned by the 3DS Server to identify a single transaction. </value>
        [DataMember(Name="threeDSServerTransactionId", EmitDefaultValue=false)]
        public string ThreeDSServerTransactionId { get; set; }

        /// <summary>
        /// Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder 
        /// </summary>
        /// <value>Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder </value>
        [DataMember(Name="whiteListStatus", EmitDefaultValue=false)]
        public string WhiteListStatus { get; set; }

        /// <summary>
        /// This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS 
        /// </summary>
        /// <value>This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS </value>
        [DataMember(Name="whiteListStatusSource", EmitDefaultValue=false)]
        public string WhiteListStatusSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Riskv1authenticationresultsConsumerAuthenticationInformation {\n");
            sb.Append("  AcsRenderingType: ").Append(AcsRenderingType).Append("\n");
            sb.Append("  AcsTransactionId: ").Append(AcsTransactionId).Append("\n");
            sb.Append("  AuthenticationTransactionId: ").Append(AuthenticationTransactionId).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  ChallengeCancelCode: ").Append(ChallengeCancelCode).Append("\n");
            sb.Append("  EffectiveAuthenticationType: ").Append(EffectiveAuthenticationType).Append("\n");
            sb.Append("  DirectoryServerErrorCode: ").Append(DirectoryServerErrorCode).Append("\n");
            sb.Append("  DirectoryServerErrorDescription: ").Append(DirectoryServerErrorDescription).Append("\n");
            sb.Append("  InteractionCounter: ").Append(InteractionCounter).Append("\n");
            sb.Append("  SignedParesStatusReason: ").Append(SignedParesStatusReason).Append("\n");
            sb.Append("  SdkTransactionId: ").Append(SdkTransactionId).Append("\n");
            sb.Append("  SignedPares: ").Append(SignedPares).Append("\n");
            sb.Append("  ThreeDSServerTransactionId: ").Append(ThreeDSServerTransactionId).Append("\n");
            sb.Append("  WhiteListStatus: ").Append(WhiteListStatus).Append("\n");
            sb.Append("  WhiteListStatusSource: ").Append(WhiteListStatusSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Riskv1authenticationresultsConsumerAuthenticationInformation);
        }

        /// <summary>
        /// Returns true if Riskv1authenticationresultsConsumerAuthenticationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Riskv1authenticationresultsConsumerAuthenticationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Riskv1authenticationresultsConsumerAuthenticationInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcsRenderingType == other.AcsRenderingType ||
                    this.AcsRenderingType != null &&
                    this.AcsRenderingType.Equals(other.AcsRenderingType)
                ) && 
                (
                    this.AcsTransactionId == other.AcsTransactionId ||
                    this.AcsTransactionId != null &&
                    this.AcsTransactionId.Equals(other.AcsTransactionId)
                ) && 
                (
                    this.AuthenticationTransactionId == other.AuthenticationTransactionId ||
                    this.AuthenticationTransactionId != null &&
                    this.AuthenticationTransactionId.Equals(other.AuthenticationTransactionId)
                ) && 
                (
                    this.AuthenticationType == other.AuthenticationType ||
                    this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    this.ChallengeCancelCode == other.ChallengeCancelCode ||
                    this.ChallengeCancelCode != null &&
                    this.ChallengeCancelCode.Equals(other.ChallengeCancelCode)
                ) && 
                (
                    this.EffectiveAuthenticationType == other.EffectiveAuthenticationType ||
                    this.EffectiveAuthenticationType != null &&
                    this.EffectiveAuthenticationType.Equals(other.EffectiveAuthenticationType)
                ) && 
                (
                    this.DirectoryServerErrorCode == other.DirectoryServerErrorCode ||
                    this.DirectoryServerErrorCode != null &&
                    this.DirectoryServerErrorCode.Equals(other.DirectoryServerErrorCode)
                ) && 
                (
                    this.DirectoryServerErrorDescription == other.DirectoryServerErrorDescription ||
                    this.DirectoryServerErrorDescription != null &&
                    this.DirectoryServerErrorDescription.Equals(other.DirectoryServerErrorDescription)
                ) && 
                (
                    this.InteractionCounter == other.InteractionCounter ||
                    this.InteractionCounter != null &&
                    this.InteractionCounter.Equals(other.InteractionCounter)
                ) && 
                (
                    this.SignedParesStatusReason == other.SignedParesStatusReason ||
                    this.SignedParesStatusReason != null &&
                    this.SignedParesStatusReason.Equals(other.SignedParesStatusReason)
                ) && 
                (
                    this.SdkTransactionId == other.SdkTransactionId ||
                    this.SdkTransactionId != null &&
                    this.SdkTransactionId.Equals(other.SdkTransactionId)
                ) && 
                (
                    this.SignedPares == other.SignedPares ||
                    this.SignedPares != null &&
                    this.SignedPares.Equals(other.SignedPares)
                ) && 
                (
                    this.ThreeDSServerTransactionId == other.ThreeDSServerTransactionId ||
                    this.ThreeDSServerTransactionId != null &&
                    this.ThreeDSServerTransactionId.Equals(other.ThreeDSServerTransactionId)
                ) && 
                (
                    this.WhiteListStatus == other.WhiteListStatus ||
                    this.WhiteListStatus != null &&
                    this.WhiteListStatus.Equals(other.WhiteListStatus)
                ) && 
                (
                    this.WhiteListStatusSource == other.WhiteListStatusSource ||
                    this.WhiteListStatusSource != null &&
                    this.WhiteListStatusSource.Equals(other.WhiteListStatusSource)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcsRenderingType != null)
                    hash = hash * 59 + this.AcsRenderingType.GetHashCode();
                if (this.AcsTransactionId != null)
                    hash = hash * 59 + this.AcsTransactionId.GetHashCode();
                if (this.AuthenticationTransactionId != null)
                    hash = hash * 59 + this.AuthenticationTransactionId.GetHashCode();
                if (this.AuthenticationType != null)
                    hash = hash * 59 + this.AuthenticationType.GetHashCode();
                if (this.ChallengeCancelCode != null)
                    hash = hash * 59 + this.ChallengeCancelCode.GetHashCode();
                if (this.EffectiveAuthenticationType != null)
                    hash = hash * 59 + this.EffectiveAuthenticationType.GetHashCode();
                if (this.DirectoryServerErrorCode != null)
                    hash = hash * 59 + this.DirectoryServerErrorCode.GetHashCode();
                if (this.DirectoryServerErrorDescription != null)
                    hash = hash * 59 + this.DirectoryServerErrorDescription.GetHashCode();
                if (this.InteractionCounter != null)
                    hash = hash * 59 + this.InteractionCounter.GetHashCode();
                if (this.SignedParesStatusReason != null)
                    hash = hash * 59 + this.SignedParesStatusReason.GetHashCode();
                if (this.SdkTransactionId != null)
                    hash = hash * 59 + this.SdkTransactionId.GetHashCode();
                if (this.SignedPares != null)
                    hash = hash * 59 + this.SignedPares.GetHashCode();
                if (this.ThreeDSServerTransactionId != null)
                    hash = hash * 59 + this.ThreeDSServerTransactionId.GetHashCode();
                if (this.WhiteListStatus != null)
                    hash = hash * 59 + this.WhiteListStatus.GetHashCode();
                if (this.WhiteListStatusSource != null)
                    hash = hash * 59 + this.WhiteListStatusSource.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AcsTransactionId (string) maxLength
            if(this.AcsTransactionId != null && this.AcsTransactionId.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcsTransactionId, length must be less than or equal to 36.", new [] { "AcsTransactionId" });
            }

            // AuthenticationTransactionId (string) maxLength
            if(this.AuthenticationTransactionId != null && this.AuthenticationTransactionId.Length >= 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationTransactionId, length must be less than or equal to 20.", new [] { "AuthenticationTransactionId" });
            }

            // AuthenticationType (string) maxLength
            if(this.AuthenticationType != null && this.AuthenticationType.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationType, length must be less than or equal to 2.", new [] { "AuthenticationType" });
            }

            // ChallengeCancelCode (string) maxLength
            if(this.ChallengeCancelCode != null && this.ChallengeCancelCode.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChallengeCancelCode, length must be less than or equal to 2.", new [] { "ChallengeCancelCode" });
            }

            // EffectiveAuthenticationType (string) maxLength
            if(this.EffectiveAuthenticationType != null && this.EffectiveAuthenticationType.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveAuthenticationType, length must be less than or equal to 2.", new [] { "EffectiveAuthenticationType" });
            }

            // DirectoryServerErrorCode (string) maxLength
            if(this.DirectoryServerErrorCode != null && this.DirectoryServerErrorCode.Length >= 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirectoryServerErrorCode, length must be less than or equal to 3.", new [] { "DirectoryServerErrorCode" });
            }

            // DirectoryServerErrorDescription (string) maxLength
            if(this.DirectoryServerErrorDescription != null && this.DirectoryServerErrorDescription.Length >= 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirectoryServerErrorDescription, length must be less than or equal to 4096.", new [] { "DirectoryServerErrorDescription" });
            }

            // InteractionCounter (string) maxLength
            if(this.InteractionCounter != null && this.InteractionCounter.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InteractionCounter, length must be less than or equal to 2.", new [] { "InteractionCounter" });
            }

            // SignedParesStatusReason (string) maxLength
            if(this.SignedParesStatusReason != null && this.SignedParesStatusReason.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignedParesStatusReason, length must be less than or equal to 2.", new [] { "SignedParesStatusReason" });
            }

            // SdkTransactionId (string) maxLength
            if(this.SdkTransactionId != null && this.SdkTransactionId.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SdkTransactionId, length must be less than or equal to 36.", new [] { "SdkTransactionId" });
            }

            // ThreeDSServerTransactionId (string) maxLength
            if(this.ThreeDSServerTransactionId != null && this.ThreeDSServerTransactionId.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThreeDSServerTransactionId, length must be less than or equal to 36.", new [] { "ThreeDSServerTransactionId" });
            }

            // WhiteListStatus (string) maxLength
            if(this.WhiteListStatus != null && this.WhiteListStatus.Length >= 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WhiteListStatus, length must be less than or equal to 1.", new [] { "WhiteListStatus" });
            }

            // WhiteListStatusSource (string) maxLength
            if(this.WhiteListStatusSource != null && this.WhiteListStatusSource.Length >= 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WhiteListStatusSource, length must be less than or equal to 2.", new [] { "WhiteListStatusSource" });
            }

            yield break;
        }
    }

}
