/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication
    /// </summary>
    [DataContract]
    public partial class RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication :  IEquatable<RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication" /> class.
        /// </summary>
        /// <param name="AcquirerReferenceFraudRateThresholdExceeded">Indicates if the Acquirer has exceeded the RFR for 180 consecutive days. (E.g. “true” if has exceeded, “false” otherwise). .</param>
        /// <param name="IssuerReferenceFraudRateThresholdExceeded">Indicates if the Issuer has exceeded the RFR for 180 consecutive days. (E.g. “True” if has exceeded, “False” otherwise). .</param>
        /// <param name="IssuerReferenceFraudRateExceeded">Indicates if the Issuer’s RFR exceeds the allowable level based on the amount in the request (E.g. “true” if has exceeded, “false” otherwise). .</param>
        /// <param name="TotalAmountValueExceeded">Indicates if the request amount has exceeded the maximum ETV rate. (E.g. “true” if exceeded, “false” otherwise). .</param>
        /// <param name="EeaDomesticInd">Indicates if the input qualifies as an EEA domestic transaction where both the Acquirer Country and Issuer Country are located in the EEA. (E.g. “1” if transaction qualifies, “0” otherwise). .</param>
        /// <param name="AcquirerReferenceFraudRateExceeded">Indicates if the Acquirer’s Reference Fraud Rate (RFR) exceeds the allowable level based on the amount in the request (E.g. “True” if has exceeded, “False” otherwise). .</param>
        /// <param name="RiskAttributesPresent">Risk Attribute Indicator based on required elements from Articles 2 &amp; 18 of the European Banking Authority (EBA) Guidelines (E.g. “True” if risk attributes present, “False” otherwise). .</param>
        /// <param name="AuthenticationExemptionsId">CYBS generated UUID used to identify the transaction. Note: 36 with hashes. .</param>
        public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication(bool? AcquirerReferenceFraudRateThresholdExceeded = default(bool?), bool? IssuerReferenceFraudRateThresholdExceeded = default(bool?), bool? IssuerReferenceFraudRateExceeded = default(bool?), bool? TotalAmountValueExceeded = default(bool?), bool? EeaDomesticInd = default(bool?), bool? AcquirerReferenceFraudRateExceeded = default(bool?), bool? RiskAttributesPresent = default(bool?), string AuthenticationExemptionsId = default(string))
        {
            this.AcquirerReferenceFraudRateThresholdExceeded = AcquirerReferenceFraudRateThresholdExceeded;
            this.IssuerReferenceFraudRateThresholdExceeded = IssuerReferenceFraudRateThresholdExceeded;
            this.IssuerReferenceFraudRateExceeded = IssuerReferenceFraudRateExceeded;
            this.TotalAmountValueExceeded = TotalAmountValueExceeded;
            this.EeaDomesticInd = EeaDomesticInd;
            this.AcquirerReferenceFraudRateExceeded = AcquirerReferenceFraudRateExceeded;
            this.RiskAttributesPresent = RiskAttributesPresent;
            this.AuthenticationExemptionsId = AuthenticationExemptionsId;
        }
        
        /// <summary>
        /// Indicates if the Acquirer has exceeded the RFR for 180 consecutive days. (E.g. “true” if has exceeded, “false” otherwise). 
        /// </summary>
        /// <value>Indicates if the Acquirer has exceeded the RFR for 180 consecutive days. (E.g. “true” if has exceeded, “false” otherwise). </value>
        [DataMember(Name="acquirerReferenceFraudRateThresholdExceeded", EmitDefaultValue=false)]
        public bool? AcquirerReferenceFraudRateThresholdExceeded { get; set; }

        /// <summary>
        /// Indicates if the Issuer has exceeded the RFR for 180 consecutive days. (E.g. “True” if has exceeded, “False” otherwise). 
        /// </summary>
        /// <value>Indicates if the Issuer has exceeded the RFR for 180 consecutive days. (E.g. “True” if has exceeded, “False” otherwise). </value>
        [DataMember(Name="issuerReferenceFraudRateThresholdExceeded", EmitDefaultValue=false)]
        public bool? IssuerReferenceFraudRateThresholdExceeded { get; set; }

        /// <summary>
        /// Indicates if the Issuer’s RFR exceeds the allowable level based on the amount in the request (E.g. “true” if has exceeded, “false” otherwise). 
        /// </summary>
        /// <value>Indicates if the Issuer’s RFR exceeds the allowable level based on the amount in the request (E.g. “true” if has exceeded, “false” otherwise). </value>
        [DataMember(Name="issuerReferenceFraudRateExceeded", EmitDefaultValue=false)]
        public bool? IssuerReferenceFraudRateExceeded { get; set; }

        /// <summary>
        /// Indicates if the request amount has exceeded the maximum ETV rate. (E.g. “true” if exceeded, “false” otherwise). 
        /// </summary>
        /// <value>Indicates if the request amount has exceeded the maximum ETV rate. (E.g. “true” if exceeded, “false” otherwise). </value>
        [DataMember(Name="totalAmountValueExceeded", EmitDefaultValue=false)]
        public bool? TotalAmountValueExceeded { get; set; }

        /// <summary>
        /// Indicates if the input qualifies as an EEA domestic transaction where both the Acquirer Country and Issuer Country are located in the EEA. (E.g. “1” if transaction qualifies, “0” otherwise). 
        /// </summary>
        /// <value>Indicates if the input qualifies as an EEA domestic transaction where both the Acquirer Country and Issuer Country are located in the EEA. (E.g. “1” if transaction qualifies, “0” otherwise). </value>
        [DataMember(Name="eeaDomesticInd", EmitDefaultValue=false)]
        public bool? EeaDomesticInd { get; set; }

        /// <summary>
        /// Indicates if the Acquirer’s Reference Fraud Rate (RFR) exceeds the allowable level based on the amount in the request (E.g. “True” if has exceeded, “False” otherwise). 
        /// </summary>
        /// <value>Indicates if the Acquirer’s Reference Fraud Rate (RFR) exceeds the allowable level based on the amount in the request (E.g. “True” if has exceeded, “False” otherwise). </value>
        [DataMember(Name="acquirerReferenceFraudRateExceeded", EmitDefaultValue=false)]
        public bool? AcquirerReferenceFraudRateExceeded { get; set; }

        /// <summary>
        /// Risk Attribute Indicator based on required elements from Articles 2 &amp; 18 of the European Banking Authority (EBA) Guidelines (E.g. “True” if risk attributes present, “False” otherwise). 
        /// </summary>
        /// <value>Risk Attribute Indicator based on required elements from Articles 2 &amp; 18 of the European Banking Authority (EBA) Guidelines (E.g. “True” if risk attributes present, “False” otherwise). </value>
        [DataMember(Name="riskAttributesPresent", EmitDefaultValue=false)]
        public bool? RiskAttributesPresent { get; set; }

        /// <summary>
        /// CYBS generated UUID used to identify the transaction. Note: 36 with hashes. 
        /// </summary>
        /// <value>CYBS generated UUID used to identify the transaction. Note: 36 with hashes. </value>
        [DataMember(Name="authenticationExemptionsId", EmitDefaultValue=false)]
        public string AuthenticationExemptionsId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication {\n");
            sb.Append("  AcquirerReferenceFraudRateThresholdExceeded: ").Append(AcquirerReferenceFraudRateThresholdExceeded).Append("\n");
            sb.Append("  IssuerReferenceFraudRateThresholdExceeded: ").Append(IssuerReferenceFraudRateThresholdExceeded).Append("\n");
            sb.Append("  IssuerReferenceFraudRateExceeded: ").Append(IssuerReferenceFraudRateExceeded).Append("\n");
            sb.Append("  TotalAmountValueExceeded: ").Append(TotalAmountValueExceeded).Append("\n");
            sb.Append("  EeaDomesticInd: ").Append(EeaDomesticInd).Append("\n");
            sb.Append("  AcquirerReferenceFraudRateExceeded: ").Append(AcquirerReferenceFraudRateExceeded).Append("\n");
            sb.Append("  RiskAttributesPresent: ").Append(RiskAttributesPresent).Append("\n");
            sb.Append("  AuthenticationExemptionsId: ").Append(AuthenticationExemptionsId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication);
        }

        /// <summary>
        /// Returns true if RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcquirerReferenceFraudRateThresholdExceeded == other.AcquirerReferenceFraudRateThresholdExceeded ||
                    this.AcquirerReferenceFraudRateThresholdExceeded != null &&
                    this.AcquirerReferenceFraudRateThresholdExceeded.Equals(other.AcquirerReferenceFraudRateThresholdExceeded)
                ) && 
                (
                    this.IssuerReferenceFraudRateThresholdExceeded == other.IssuerReferenceFraudRateThresholdExceeded ||
                    this.IssuerReferenceFraudRateThresholdExceeded != null &&
                    this.IssuerReferenceFraudRateThresholdExceeded.Equals(other.IssuerReferenceFraudRateThresholdExceeded)
                ) && 
                (
                    this.IssuerReferenceFraudRateExceeded == other.IssuerReferenceFraudRateExceeded ||
                    this.IssuerReferenceFraudRateExceeded != null &&
                    this.IssuerReferenceFraudRateExceeded.Equals(other.IssuerReferenceFraudRateExceeded)
                ) && 
                (
                    this.TotalAmountValueExceeded == other.TotalAmountValueExceeded ||
                    this.TotalAmountValueExceeded != null &&
                    this.TotalAmountValueExceeded.Equals(other.TotalAmountValueExceeded)
                ) && 
                (
                    this.EeaDomesticInd == other.EeaDomesticInd ||
                    this.EeaDomesticInd != null &&
                    this.EeaDomesticInd.Equals(other.EeaDomesticInd)
                ) && 
                (
                    this.AcquirerReferenceFraudRateExceeded == other.AcquirerReferenceFraudRateExceeded ||
                    this.AcquirerReferenceFraudRateExceeded != null &&
                    this.AcquirerReferenceFraudRateExceeded.Equals(other.AcquirerReferenceFraudRateExceeded)
                ) && 
                (
                    this.RiskAttributesPresent == other.RiskAttributesPresent ||
                    this.RiskAttributesPresent != null &&
                    this.RiskAttributesPresent.Equals(other.RiskAttributesPresent)
                ) && 
                (
                    this.AuthenticationExemptionsId == other.AuthenticationExemptionsId ||
                    this.AuthenticationExemptionsId != null &&
                    this.AuthenticationExemptionsId.Equals(other.AuthenticationExemptionsId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcquirerReferenceFraudRateThresholdExceeded != null)
                    hash = hash * 59 + this.AcquirerReferenceFraudRateThresholdExceeded.GetHashCode();
                if (this.IssuerReferenceFraudRateThresholdExceeded != null)
                    hash = hash * 59 + this.IssuerReferenceFraudRateThresholdExceeded.GetHashCode();
                if (this.IssuerReferenceFraudRateExceeded != null)
                    hash = hash * 59 + this.IssuerReferenceFraudRateExceeded.GetHashCode();
                if (this.TotalAmountValueExceeded != null)
                    hash = hash * 59 + this.TotalAmountValueExceeded.GetHashCode();
                if (this.EeaDomesticInd != null)
                    hash = hash * 59 + this.EeaDomesticInd.GetHashCode();
                if (this.AcquirerReferenceFraudRateExceeded != null)
                    hash = hash * 59 + this.AcquirerReferenceFraudRateExceeded.GetHashCode();
                if (this.RiskAttributesPresent != null)
                    hash = hash * 59 + this.RiskAttributesPresent.GetHashCode();
                if (this.AuthenticationExemptionsId != null)
                    hash = hash * 59 + this.AuthenticationExemptionsId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AuthenticationExemptionsId (string) maxLength
            if(this.AuthenticationExemptionsId != null && this.AuthenticationExemptionsId.Length >= 36)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationExemptionsId, length must be less than or equal to 36.", new [] { "AuthenticationExemptionsId" });
            }

            yield break;
        }
    }

}
