/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation
    /// </summary>
    [DataContract]
    public partial class RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation :  IEquatable<RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation" /> class.
        /// </summary>
        /// <param name="AcsUrl">URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large. .</param>
        /// <param name="AuthenticationPath">Indicates what displays to the customer during the authentication process. This field can contain one of these values: - &#x60;ADS&#x60;: (Card not enrolled) customer prompted to activate the card during the checkout process. - &#x60;ATTEMPTS&#x60;: (Attempts processing) Processing briefly displays before the checkout process is completed. - &#x60;ENROLLED&#x60;: (Card enrolled) the card issuer’s authentication window displays. - &#x60;UNKNOWN&#x60;: Card enrollment status cannot be determined. - &#x60;NOREDIRECT&#x60;: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - &#x60;RIBA&#x60;: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - &#x60;RIBA_PASS&#x60;: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see &#x60;pa_enroll_authentication_path&#x60; field description and \&quot;Rules-Based Payer Authentication\&quot; in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) .</param>
        /// <param name="AuthenticationTransactionId">Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. .</param>
        /// <param name="Cavv">Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. .</param>
        /// <param name="CavvAlgorithm">Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the &#x60;cavv_algorithm&#x60; request field of the authorization service. This field contains one of these values: - &#x60;2&#x60;: Visa, American Express, JCB, Diners Club, and Discover - &#x60;3&#x60;: Mastercard .</param>
        /// <param name="ChallengeRequired">Indicates whether a challenge is required to complete authentication (region mandates). .</param>
        /// <param name="EcommerceIndicator">Commerce indicator for cards not enrolled. This field contains one of these values: - &#x60;internet&#x60;: Card not enrolled, or card type not supported by payer authentication. No liability shift. - &#x60;js_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;js_failure&#x60;: J/Secure directory service is not available. No liability shift. - &#x60;spa&#x60;: Mastercard card not enrolled in the SecureCode program. No liability shift. - &#x60;vbv_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;vbv_failure&#x60;: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift. .</param>
        /// <param name="Eci">Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \&quot;Interpreting the Reply,\&quot; page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;06&#x60;: The card can be enrolled. Liability shift. - &#x60;07&#x60;: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;05&#x60;: Successful authentication - &#x60;06&#x60;: Authentication attempted - &#x60;07&#x60;: Failed authentication (No response from the merchant because of a problem.) .</param>
        /// <param name="EciRaw">ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must pass the value of this field instead of the value of &#x60;eci&#x60; or &#x60;ucafCollectionIndicator&#x60;.  This field can contain one of these values: - &#x60;01&#x60;: Authentication attempted (Mastercard) - &#x60;02&#x60;: Successful authentication (Mastercard) - &#x60;05&#x60;: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - &#x60;06&#x60;: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover) .</param>
        /// <param name="Pareq">Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64. .</param>
        /// <param name="ParesStatus">Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - &#x60;A&#x60;: Proof of authentication attempt was generated. - &#x60;B&#x60;: Bypassed authentication. - &#x60;N&#x60;: Customer failed or canceled authentication. Transaction denied. - &#x60;R&#x60;: Authentication rejected (used for 3D Secure 2.0 transactions only) - &#x60;U&#x60;: Authentication not completed regardless of the reason. - &#x60;Y&#x60;: Customer was successfully authenticated. .</param>
        /// <param name="ProofXml">Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the &#x60;pa_enroll_proofxml&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback. .</param>
        /// <param name="ProxyPan">Encrypted version of the card number used in the payer authentication request message. .</param>
        /// <param name="SpecificationVersion">This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0. .</param>
        /// <param name="UcafAuthenticationData">AAV is a unique identifier generated by the cardissuing bank for Mastercard SecureCode transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request. .</param>
        /// <param name="UcafCollectionIndicator">For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard SecureCode transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - &#x60;0&#x60;: Authentication data not collected, and customer authentication was not completed. - &#x60;1&#x60;: Authentication data not collected because customer authentication was not completed. - &#x60;2&#x60;: Authentication data collected because customer completed authentication. .</param>
        /// <param name="VeresEnrolled">Result of the enrollment check. This field can contain one of these values: - &#x60;Y&#x60;: Card enrolled or can be enrolled; you must authenticate. Liability shift. - &#x60;N&#x60;: Card not enrolled; proceed with authorization. Liability shift. - &#x60;U&#x60;: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - &#x60;B&#x60;: Indicates that authentication was bypassed.  For details, see &#x60;pa_enroll_veres_enrolled&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) .</param>
        /// <param name="Xid">Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) .</param>
        public RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation(string AcsUrl = default(string), string AuthenticationPath = default(string), string AuthenticationTransactionId = default(string), string Cavv = default(string), string CavvAlgorithm = default(string), bool? ChallengeRequired = default(bool?), string EcommerceIndicator = default(string), string Eci = default(string), string EciRaw = default(string), string Pareq = default(string), string ParesStatus = default(string), string ProofXml = default(string), string ProxyPan = default(string), string SpecificationVersion = default(string), string UcafAuthenticationData = default(string), decimal? UcafCollectionIndicator = default(decimal?), string VeresEnrolled = default(string), string Xid = default(string))
        {
            this.AcsUrl = AcsUrl;
            this.AuthenticationPath = AuthenticationPath;
            this.AuthenticationTransactionId = AuthenticationTransactionId;
            this.Cavv = Cavv;
            this.CavvAlgorithm = CavvAlgorithm;
            this.ChallengeRequired = ChallengeRequired;
            this.EcommerceIndicator = EcommerceIndicator;
            this.Eci = Eci;
            this.EciRaw = EciRaw;
            this.Pareq = Pareq;
            this.ParesStatus = ParesStatus;
            this.ProofXml = ProofXml;
            this.ProxyPan = ProxyPan;
            this.SpecificationVersion = SpecificationVersion;
            this.UcafAuthenticationData = UcafAuthenticationData;
            this.UcafCollectionIndicator = UcafCollectionIndicator;
            this.VeresEnrolled = VeresEnrolled;
            this.Xid = Xid;
        }
        
        /// <summary>
        /// URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large. 
        /// </summary>
        /// <value>URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large. </value>
        [DataMember(Name="acsUrl", EmitDefaultValue=false)]
        public string AcsUrl { get; set; }

        /// <summary>
        /// Indicates what displays to the customer during the authentication process. This field can contain one of these values: - &#x60;ADS&#x60;: (Card not enrolled) customer prompted to activate the card during the checkout process. - &#x60;ATTEMPTS&#x60;: (Attempts processing) Processing briefly displays before the checkout process is completed. - &#x60;ENROLLED&#x60;: (Card enrolled) the card issuer’s authentication window displays. - &#x60;UNKNOWN&#x60;: Card enrollment status cannot be determined. - &#x60;NOREDIRECT&#x60;: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - &#x60;RIBA&#x60;: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - &#x60;RIBA_PASS&#x60;: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see &#x60;pa_enroll_authentication_path&#x60; field description and \&quot;Rules-Based Payer Authentication\&quot; in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
        /// </summary>
        /// <value>Indicates what displays to the customer during the authentication process. This field can contain one of these values: - &#x60;ADS&#x60;: (Card not enrolled) customer prompted to activate the card during the checkout process. - &#x60;ATTEMPTS&#x60;: (Attempts processing) Processing briefly displays before the checkout process is completed. - &#x60;ENROLLED&#x60;: (Card enrolled) the card issuer’s authentication window displays. - &#x60;UNKNOWN&#x60;: Card enrollment status cannot be determined. - &#x60;NOREDIRECT&#x60;: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - &#x60;RIBA&#x60;: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - &#x60;RIBA_PASS&#x60;: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see &#x60;pa_enroll_authentication_path&#x60; field description and \&quot;Rules-Based Payer Authentication\&quot; in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) </value>
        [DataMember(Name="authenticationPath", EmitDefaultValue=false)]
        public string AuthenticationPath { get; set; }

        /// <summary>
        /// Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. 
        /// </summary>
        /// <value>Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. </value>
        [DataMember(Name="authenticationTransactionId", EmitDefaultValue=false)]
        public string AuthenticationTransactionId { get; set; }

        /// <summary>
        /// Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. 
        /// </summary>
        /// <value>Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. </value>
        [DataMember(Name="cavv", EmitDefaultValue=false)]
        public string Cavv { get; set; }

        /// <summary>
        /// Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the &#x60;cavv_algorithm&#x60; request field of the authorization service. This field contains one of these values: - &#x60;2&#x60;: Visa, American Express, JCB, Diners Club, and Discover - &#x60;3&#x60;: Mastercard 
        /// </summary>
        /// <value>Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the &#x60;cavv_algorithm&#x60; request field of the authorization service. This field contains one of these values: - &#x60;2&#x60;: Visa, American Express, JCB, Diners Club, and Discover - &#x60;3&#x60;: Mastercard </value>
        [DataMember(Name="cavvAlgorithm", EmitDefaultValue=false)]
        public string CavvAlgorithm { get; set; }

        /// <summary>
        /// Indicates whether a challenge is required to complete authentication (region mandates). 
        /// </summary>
        /// <value>Indicates whether a challenge is required to complete authentication (region mandates). </value>
        [DataMember(Name="challengeRequired", EmitDefaultValue=false)]
        public bool? ChallengeRequired { get; set; }

        /// <summary>
        /// Commerce indicator for cards not enrolled. This field contains one of these values: - &#x60;internet&#x60;: Card not enrolled, or card type not supported by payer authentication. No liability shift. - &#x60;js_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;js_failure&#x60;: J/Secure directory service is not available. No liability shift. - &#x60;spa&#x60;: Mastercard card not enrolled in the SecureCode program. No liability shift. - &#x60;vbv_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;vbv_failure&#x60;: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift. 
        /// </summary>
        /// <value>Commerce indicator for cards not enrolled. This field contains one of these values: - &#x60;internet&#x60;: Card not enrolled, or card type not supported by payer authentication. No liability shift. - &#x60;js_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;js_failure&#x60;: J/Secure directory service is not available. No liability shift. - &#x60;spa&#x60;: Mastercard card not enrolled in the SecureCode program. No liability shift. - &#x60;vbv_attempted&#x60;: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - &#x60;vbv_failure&#x60;: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift. </value>
        [DataMember(Name="ecommerceIndicator", EmitDefaultValue=false)]
        public string EcommerceIndicator { get; set; }

        /// <summary>
        /// Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \&quot;Interpreting the Reply,\&quot; page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;06&#x60;: The card can be enrolled. Liability shift. - &#x60;07&#x60;: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;05&#x60;: Successful authentication - &#x60;06&#x60;: Authentication attempted - &#x60;07&#x60;: Failed authentication (No response from the merchant because of a problem.) 
        /// </summary>
        /// <value>Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \&quot;Interpreting the Reply,\&quot; page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;06&#x60;: The card can be enrolled. Liability shift. - &#x60;07&#x60;: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;05&#x60;: Successful authentication - &#x60;06&#x60;: Authentication attempted - &#x60;07&#x60;: Failed authentication (No response from the merchant because of a problem.) </value>
        [DataMember(Name="eci", EmitDefaultValue=false)]
        public string Eci { get; set; }

        /// <summary>
        /// ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must pass the value of this field instead of the value of &#x60;eci&#x60; or &#x60;ucafCollectionIndicator&#x60;.  This field can contain one of these values: - &#x60;01&#x60;: Authentication attempted (Mastercard) - &#x60;02&#x60;: Successful authentication (Mastercard) - &#x60;05&#x60;: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - &#x60;06&#x60;: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover) 
        /// </summary>
        /// <value>ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must pass the value of this field instead of the value of &#x60;eci&#x60; or &#x60;ucafCollectionIndicator&#x60;.  This field can contain one of these values: - &#x60;01&#x60;: Authentication attempted (Mastercard) - &#x60;02&#x60;: Successful authentication (Mastercard) - &#x60;05&#x60;: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - &#x60;06&#x60;: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover) </value>
        [DataMember(Name="eciRaw", EmitDefaultValue=false)]
        public string EciRaw { get; set; }

        /// <summary>
        /// Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64. 
        /// </summary>
        /// <value>Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64. </value>
        [DataMember(Name="pareq", EmitDefaultValue=false)]
        public string Pareq { get; set; }

        /// <summary>
        /// Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - &#x60;A&#x60;: Proof of authentication attempt was generated. - &#x60;B&#x60;: Bypassed authentication. - &#x60;N&#x60;: Customer failed or canceled authentication. Transaction denied. - &#x60;R&#x60;: Authentication rejected (used for 3D Secure 2.0 transactions only) - &#x60;U&#x60;: Authentication not completed regardless of the reason. - &#x60;Y&#x60;: Customer was successfully authenticated. 
        /// </summary>
        /// <value>Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - &#x60;A&#x60;: Proof of authentication attempt was generated. - &#x60;B&#x60;: Bypassed authentication. - &#x60;N&#x60;: Customer failed or canceled authentication. Transaction denied. - &#x60;R&#x60;: Authentication rejected (used for 3D Secure 2.0 transactions only) - &#x60;U&#x60;: Authentication not completed regardless of the reason. - &#x60;Y&#x60;: Customer was successfully authenticated. </value>
        [DataMember(Name="paresStatus", EmitDefaultValue=false)]
        public string ParesStatus { get; set; }

        /// <summary>
        /// Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the &#x60;pa_enroll_proofxml&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback. 
        /// </summary>
        /// <value>Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the &#x60;pa_enroll_proofxml&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback. </value>
        [DataMember(Name="proofXml", EmitDefaultValue=false)]
        public string ProofXml { get; set; }

        /// <summary>
        /// Encrypted version of the card number used in the payer authentication request message. 
        /// </summary>
        /// <value>Encrypted version of the card number used in the payer authentication request message. </value>
        [DataMember(Name="proxyPan", EmitDefaultValue=false)]
        public string ProxyPan { get; set; }

        /// <summary>
        /// This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0. 
        /// </summary>
        /// <value>This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0. </value>
        [DataMember(Name="specificationVersion", EmitDefaultValue=false)]
        public string SpecificationVersion { get; set; }

        /// <summary>
        /// AAV is a unique identifier generated by the cardissuing bank for Mastercard SecureCode transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request. 
        /// </summary>
        /// <value>AAV is a unique identifier generated by the cardissuing bank for Mastercard SecureCode transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request. </value>
        [DataMember(Name="ucafAuthenticationData", EmitDefaultValue=false)]
        public string UcafAuthenticationData { get; set; }

        /// <summary>
        /// For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard SecureCode transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - &#x60;0&#x60;: Authentication data not collected, and customer authentication was not completed. - &#x60;1&#x60;: Authentication data not collected because customer authentication was not completed. - &#x60;2&#x60;: Authentication data collected because customer completed authentication. 
        /// </summary>
        /// <value>For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard SecureCode transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - &#x60;0&#x60;: Authentication data not collected, and customer authentication was not completed. - &#x60;1&#x60;: Authentication data not collected because customer authentication was not completed. - &#x60;2&#x60;: Authentication data collected because customer completed authentication. </value>
        [DataMember(Name="ucafCollectionIndicator", EmitDefaultValue=false)]
        public decimal? UcafCollectionIndicator { get; set; }

        /// <summary>
        /// Result of the enrollment check. This field can contain one of these values: - &#x60;Y&#x60;: Card enrolled or can be enrolled; you must authenticate. Liability shift. - &#x60;N&#x60;: Card not enrolled; proceed with authorization. Liability shift. - &#x60;U&#x60;: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - &#x60;B&#x60;: Indicates that authentication was bypassed.  For details, see &#x60;pa_enroll_veres_enrolled&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
        /// </summary>
        /// <value>Result of the enrollment check. This field can contain one of these values: - &#x60;Y&#x60;: Card enrolled or can be enrolled; you must authenticate. Liability shift. - &#x60;N&#x60;: Card not enrolled; proceed with authorization. Liability shift. - &#x60;U&#x60;: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - &#x60;B&#x60;: Indicates that authentication was bypassed.  For details, see &#x60;pa_enroll_veres_enrolled&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) </value>
        [DataMember(Name="veresEnrolled", EmitDefaultValue=false)]
        public string VeresEnrolled { get; set; }

        /// <summary>
        /// Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) 
        /// </summary>
        /// <value>Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) </value>
        [DataMember(Name="xid", EmitDefaultValue=false)]
        public string Xid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation {\n");
            sb.Append("  AcsUrl: ").Append(AcsUrl).Append("\n");
            sb.Append("  AuthenticationPath: ").Append(AuthenticationPath).Append("\n");
            sb.Append("  AuthenticationTransactionId: ").Append(AuthenticationTransactionId).Append("\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  CavvAlgorithm: ").Append(CavvAlgorithm).Append("\n");
            sb.Append("  ChallengeRequired: ").Append(ChallengeRequired).Append("\n");
            sb.Append("  EcommerceIndicator: ").Append(EcommerceIndicator).Append("\n");
            sb.Append("  Eci: ").Append(Eci).Append("\n");
            sb.Append("  EciRaw: ").Append(EciRaw).Append("\n");
            sb.Append("  Pareq: ").Append(Pareq).Append("\n");
            sb.Append("  ParesStatus: ").Append(ParesStatus).Append("\n");
            sb.Append("  ProofXml: ").Append(ProofXml).Append("\n");
            sb.Append("  ProxyPan: ").Append(ProxyPan).Append("\n");
            sb.Append("  SpecificationVersion: ").Append(SpecificationVersion).Append("\n");
            sb.Append("  UcafAuthenticationData: ").Append(UcafAuthenticationData).Append("\n");
            sb.Append("  UcafCollectionIndicator: ").Append(UcafCollectionIndicator).Append("\n");
            sb.Append("  VeresEnrolled: ").Append(VeresEnrolled).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation);
        }

        /// <summary>
        /// Returns true if RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1AuthenticationsPost201ResponseConsumerAuthenticationInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AcsUrl == other.AcsUrl ||
                    this.AcsUrl != null &&
                    this.AcsUrl.Equals(other.AcsUrl)
                ) && 
                (
                    this.AuthenticationPath == other.AuthenticationPath ||
                    this.AuthenticationPath != null &&
                    this.AuthenticationPath.Equals(other.AuthenticationPath)
                ) && 
                (
                    this.AuthenticationTransactionId == other.AuthenticationTransactionId ||
                    this.AuthenticationTransactionId != null &&
                    this.AuthenticationTransactionId.Equals(other.AuthenticationTransactionId)
                ) && 
                (
                    this.Cavv == other.Cavv ||
                    this.Cavv != null &&
                    this.Cavv.Equals(other.Cavv)
                ) && 
                (
                    this.CavvAlgorithm == other.CavvAlgorithm ||
                    this.CavvAlgorithm != null &&
                    this.CavvAlgorithm.Equals(other.CavvAlgorithm)
                ) && 
                (
                    this.ChallengeRequired == other.ChallengeRequired ||
                    this.ChallengeRequired != null &&
                    this.ChallengeRequired.Equals(other.ChallengeRequired)
                ) && 
                (
                    this.EcommerceIndicator == other.EcommerceIndicator ||
                    this.EcommerceIndicator != null &&
                    this.EcommerceIndicator.Equals(other.EcommerceIndicator)
                ) && 
                (
                    this.Eci == other.Eci ||
                    this.Eci != null &&
                    this.Eci.Equals(other.Eci)
                ) && 
                (
                    this.EciRaw == other.EciRaw ||
                    this.EciRaw != null &&
                    this.EciRaw.Equals(other.EciRaw)
                ) && 
                (
                    this.Pareq == other.Pareq ||
                    this.Pareq != null &&
                    this.Pareq.Equals(other.Pareq)
                ) && 
                (
                    this.ParesStatus == other.ParesStatus ||
                    this.ParesStatus != null &&
                    this.ParesStatus.Equals(other.ParesStatus)
                ) && 
                (
                    this.ProofXml == other.ProofXml ||
                    this.ProofXml != null &&
                    this.ProofXml.Equals(other.ProofXml)
                ) && 
                (
                    this.ProxyPan == other.ProxyPan ||
                    this.ProxyPan != null &&
                    this.ProxyPan.Equals(other.ProxyPan)
                ) && 
                (
                    this.SpecificationVersion == other.SpecificationVersion ||
                    this.SpecificationVersion != null &&
                    this.SpecificationVersion.Equals(other.SpecificationVersion)
                ) && 
                (
                    this.UcafAuthenticationData == other.UcafAuthenticationData ||
                    this.UcafAuthenticationData != null &&
                    this.UcafAuthenticationData.Equals(other.UcafAuthenticationData)
                ) && 
                (
                    this.UcafCollectionIndicator == other.UcafCollectionIndicator ||
                    this.UcafCollectionIndicator != null &&
                    this.UcafCollectionIndicator.Equals(other.UcafCollectionIndicator)
                ) && 
                (
                    this.VeresEnrolled == other.VeresEnrolled ||
                    this.VeresEnrolled != null &&
                    this.VeresEnrolled.Equals(other.VeresEnrolled)
                ) && 
                (
                    this.Xid == other.Xid ||
                    this.Xid != null &&
                    this.Xid.Equals(other.Xid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AcsUrl != null)
                    hash = hash * 59 + this.AcsUrl.GetHashCode();
                if (this.AuthenticationPath != null)
                    hash = hash * 59 + this.AuthenticationPath.GetHashCode();
                if (this.AuthenticationTransactionId != null)
                    hash = hash * 59 + this.AuthenticationTransactionId.GetHashCode();
                if (this.Cavv != null)
                    hash = hash * 59 + this.Cavv.GetHashCode();
                if (this.CavvAlgorithm != null)
                    hash = hash * 59 + this.CavvAlgorithm.GetHashCode();
                if (this.ChallengeRequired != null)
                    hash = hash * 59 + this.ChallengeRequired.GetHashCode();
                if (this.EcommerceIndicator != null)
                    hash = hash * 59 + this.EcommerceIndicator.GetHashCode();
                if (this.Eci != null)
                    hash = hash * 59 + this.Eci.GetHashCode();
                if (this.EciRaw != null)
                    hash = hash * 59 + this.EciRaw.GetHashCode();
                if (this.Pareq != null)
                    hash = hash * 59 + this.Pareq.GetHashCode();
                if (this.ParesStatus != null)
                    hash = hash * 59 + this.ParesStatus.GetHashCode();
                if (this.ProofXml != null)
                    hash = hash * 59 + this.ProofXml.GetHashCode();
                if (this.ProxyPan != null)
                    hash = hash * 59 + this.ProxyPan.GetHashCode();
                if (this.SpecificationVersion != null)
                    hash = hash * 59 + this.SpecificationVersion.GetHashCode();
                if (this.UcafAuthenticationData != null)
                    hash = hash * 59 + this.UcafAuthenticationData.GetHashCode();
                if (this.UcafCollectionIndicator != null)
                    hash = hash * 59 + this.UcafCollectionIndicator.GetHashCode();
                if (this.VeresEnrolled != null)
                    hash = hash * 59 + this.VeresEnrolled.GetHashCode();
                if (this.Xid != null)
                    hash = hash * 59 + this.Xid.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AcsUrl (string) maxLength
            if(this.AcsUrl != null && this.AcsUrl.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcsUrl, length must be less than 2048.", new [] { "AcsUrl" });
            }

            // AuthenticationTransactionId (string) maxLength
            if(this.AuthenticationTransactionId != null && this.AuthenticationTransactionId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationTransactionId, length must be less than 20.", new [] { "AuthenticationTransactionId" });
            }

            // Cavv (string) maxLength
            if(this.Cavv != null && this.Cavv.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cavv, length must be less than 255.", new [] { "Cavv" });
            }

            // CavvAlgorithm (string) maxLength
            if(this.CavvAlgorithm != null && this.CavvAlgorithm.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CavvAlgorithm, length must be less than 1.", new [] { "CavvAlgorithm" });
            }

            // EcommerceIndicator (string) maxLength
            if(this.EcommerceIndicator != null && this.EcommerceIndicator.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EcommerceIndicator, length must be less than 255.", new [] { "EcommerceIndicator" });
            }

            yield break;
        }
    }

}
