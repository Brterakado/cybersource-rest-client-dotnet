/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Riskv1authenticationsConsumerAuthenticationInformation
    /// </summary>
    [DataContract]
    public partial class Riskv1authenticationsConsumerAuthenticationInformation :  IEquatable<Riskv1authenticationsConsumerAuthenticationInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationsConsumerAuthenticationInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Riskv1authenticationsConsumerAuthenticationInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationsConsumerAuthenticationInformation" /> class.
        /// </summary>
        /// <param name="AlternateAuthenticationData">Data that documents and supports a specific authentication process. .</param>
        /// <param name="AlternateAuthenticationDate">Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM .</param>
        /// <param name="AlternateAuthenticationMethod">Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - &#x60;01&#x60;: No authentication occurred - &#x60;02&#x60;: Login using merchant system credentials - &#x60;03&#x60;: Login using Federated ID - &#x60;04&#x60;: Login using FIDO Authenticator .</param>
        /// <param name="AuthenticationTransactionId">Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. .</param>
        /// <param name="ChallengeCode">Possible values: - &#x60;01&#x60;: No preference - &#x60;02&#x60;: No challenge request - &#x60;03&#x60;: Challenge requested (3D Secure requestor preference) - &#x60;04&#x60;: Challenge requested (mandate) - &#x60;05-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use  For details, see &#x60;pa_challenge_code&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) .</param>
        /// <param name="CustomerCardAlias">An alias that uniquely identifies the customer&#39;s account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. .</param>
        /// <param name="DefaultCard">Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. .</param>
        /// <param name="InstallmentTotalCount">An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. .</param>
        /// <param name="MarketingOptIn">Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. .</param>
        /// <param name="MarketingSource">Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. .</param>
        /// <param name="Mcc">Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.  (required).</param>
        /// <param name="MessageCategory">Category of the message for a specific use case. Possible values:  - &#x60;01&#x60;: PA- payment authentication - &#x60;02&#x60;: NPA- non-payment authentication - &#x60;03-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use .</param>
        /// <param name="NpaCode">Non-Payer Authentication Indicator. Possible values: - &#x60;01&#x60;: Add card - &#x60;02&#x60;: Maintain card information - &#x60;03&#x60;: Cardholder verification for EMV token - &#x60;04-80&#x60; Reserved for EMVCo - &#x60;80-90&#x60; Reserved DS .</param>
        /// <param name="OverridePaymentMethod">Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - &#x60;NA&#x60;: Not applicable. Do not override other payment types that are specified in the request. - &#x60;CR&#x60;: Credit card. - &#x60;DB&#x60;: Debit card. - &#x60;VSAVR&#x60;: Visa Vale Refeicao - &#x60;VSAVA&#x60;: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. .</param>
        /// <param name="ProductCode">Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - &#x60;ACC&#x60;: Accommodation Rental - &#x60;ACF&#x60;: Account funding - &#x60;CHA&#x60;: Check acceptance - &#x60;DIG&#x60;: Digital Goods - &#x60;DSP&#x60;: Cash Dispensing - &#x60;GAS&#x60;: Fuel - &#x60;GEN&#x60;: General Retail - &#x60;LUX&#x60;: Luxury Retail - &#x60;PAL&#x60;: Prepaid activation and load - &#x60;PHY&#x60;: Goods or services purchase - &#x60;QCT&#x60;: Quasi-cash transaction - &#x60;REN&#x60;: Car Rental - &#x60;RES&#x60;: Restaurant - &#x60;SVC&#x60;: Services - &#x60;TBD&#x60;: Other - &#x60;TRA&#x60;: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. .</param>
        /// <param name="RequestorId">Cardinal&#39;s directory server assigned 3DS Requestor ID value.</param>
        /// <param name="RequestorName">Cardinal&#39;s directory server assigned 3DS Requestor Name value.</param>
        /// <param name="ReferenceId">Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration.  (required).</param>
        /// <param name="TransactionMode">Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values: - &#x60;MOTO&#x60; - MOTO (Mail Order Telephone Order) - &#x60;RETAIL&#x60; - Retail - &#x60;ECOMMERCE&#x60; - eCommerce - &#x60;MOBILE&#x60; - Mobile Device - &#x60;TABLET&#x60; - Tablet  (required).</param>
        public Riskv1authenticationsConsumerAuthenticationInformation(string AlternateAuthenticationData = default(string), string AlternateAuthenticationDate = default(string), string AlternateAuthenticationMethod = default(string), string AuthenticationTransactionId = default(string), string ChallengeCode = default(string), string CustomerCardAlias = default(string), bool? DefaultCard = default(bool?), int? InstallmentTotalCount = default(int?), bool? MarketingOptIn = default(bool?), string MarketingSource = default(string), string Mcc = default(string), string MessageCategory = default(string), string NpaCode = default(string), string OverridePaymentMethod = default(string), string ProductCode = default(string), string RequestorId = default(string), string RequestorName = default(string), string ReferenceId = default(string), string TransactionMode = default(string))
        {
            // to ensure "Mcc" is required (not null)
            if (Mcc == null)
            {
                throw new InvalidDataException("Mcc is a required property for Riskv1authenticationsConsumerAuthenticationInformation and cannot be null");
            }
            else
            {
                this.Mcc = Mcc;
            }
            // to ensure "ReferenceId" is required (not null)
            if (ReferenceId == null)
            {
                throw new InvalidDataException("ReferenceId is a required property for Riskv1authenticationsConsumerAuthenticationInformation and cannot be null");
            }
            else
            {
                this.ReferenceId = ReferenceId;
            }
            // to ensure "TransactionMode" is required (not null)
            if (TransactionMode == null)
            {
                throw new InvalidDataException("TransactionMode is a required property for Riskv1authenticationsConsumerAuthenticationInformation and cannot be null");
            }
            else
            {
                this.TransactionMode = TransactionMode;
            }
            this.AlternateAuthenticationData = AlternateAuthenticationData;
            this.AlternateAuthenticationDate = AlternateAuthenticationDate;
            this.AlternateAuthenticationMethod = AlternateAuthenticationMethod;
            this.AuthenticationTransactionId = AuthenticationTransactionId;
            this.ChallengeCode = ChallengeCode;
            this.CustomerCardAlias = CustomerCardAlias;
            this.DefaultCard = DefaultCard;
            this.InstallmentTotalCount = InstallmentTotalCount;
            this.MarketingOptIn = MarketingOptIn;
            this.MarketingSource = MarketingSource;
            this.MessageCategory = MessageCategory;
            this.NpaCode = NpaCode;
            this.OverridePaymentMethod = OverridePaymentMethod;
            this.ProductCode = ProductCode;
            this.RequestorId = RequestorId;
            this.RequestorName = RequestorName;
        }
        
        /// <summary>
        /// Data that documents and supports a specific authentication process. 
        /// </summary>
        /// <value>Data that documents and supports a specific authentication process. </value>
        [DataMember(Name="alternateAuthenticationData", EmitDefaultValue=false)]
        public string AlternateAuthenticationData { get; set; }

        /// <summary>
        /// Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM 
        /// </summary>
        /// <value>Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM </value>
        [DataMember(Name="alternateAuthenticationDate", EmitDefaultValue=false)]
        public string AlternateAuthenticationDate { get; set; }

        /// <summary>
        /// Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - &#x60;01&#x60;: No authentication occurred - &#x60;02&#x60;: Login using merchant system credentials - &#x60;03&#x60;: Login using Federated ID - &#x60;04&#x60;: Login using FIDO Authenticator 
        /// </summary>
        /// <value>Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - &#x60;01&#x60;: No authentication occurred - &#x60;02&#x60;: Login using merchant system credentials - &#x60;03&#x60;: Login using Federated ID - &#x60;04&#x60;: Login using FIDO Authenticator </value>
        [DataMember(Name="alternateAuthenticationMethod", EmitDefaultValue=false)]
        public string AlternateAuthenticationMethod { get; set; }

        /// <summary>
        /// Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. 
        /// </summary>
        /// <value>Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. </value>
        [DataMember(Name="authenticationTransactionId", EmitDefaultValue=false)]
        public string AuthenticationTransactionId { get; set; }

        /// <summary>
        /// Possible values: - &#x60;01&#x60;: No preference - &#x60;02&#x60;: No challenge request - &#x60;03&#x60;: Challenge requested (3D Secure requestor preference) - &#x60;04&#x60;: Challenge requested (mandate) - &#x60;05-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use  For details, see &#x60;pa_challenge_code&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
        /// </summary>
        /// <value>Possible values: - &#x60;01&#x60;: No preference - &#x60;02&#x60;: No challenge request - &#x60;03&#x60;: Challenge requested (3D Secure requestor preference) - &#x60;04&#x60;: Challenge requested (mandate) - &#x60;05-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use  For details, see &#x60;pa_challenge_code&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) </value>
        [DataMember(Name="challengeCode", EmitDefaultValue=false)]
        public string ChallengeCode { get; set; }

        /// <summary>
        /// An alias that uniquely identifies the customer&#39;s account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. 
        /// </summary>
        /// <value>An alias that uniquely identifies the customer&#39;s account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. </value>
        [DataMember(Name="customerCardAlias", EmitDefaultValue=false)]
        public string CustomerCardAlias { get; set; }

        /// <summary>
        /// Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="defaultCard", EmitDefaultValue=false)]
        public bool? DefaultCard { get; set; }

        /// <summary>
        /// An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. 
        /// </summary>
        /// <value>An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. </value>
        [DataMember(Name="installmentTotalCount", EmitDefaultValue=false)]
        public int? InstallmentTotalCount { get; set; }

        /// <summary>
        /// Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="marketingOptIn", EmitDefaultValue=false)]
        public bool? MarketingOptIn { get; set; }

        /// <summary>
        /// Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. 
        /// </summary>
        /// <value>Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. </value>
        [DataMember(Name="marketingSource", EmitDefaultValue=false)]
        public string MarketingSource { get; set; }

        /// <summary>
        /// Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
        /// </summary>
        /// <value>Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. </value>
        [DataMember(Name="mcc", EmitDefaultValue=false)]
        public string Mcc { get; set; }

        /// <summary>
        /// Category of the message for a specific use case. Possible values:  - &#x60;01&#x60;: PA- payment authentication - &#x60;02&#x60;: NPA- non-payment authentication - &#x60;03-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use 
        /// </summary>
        /// <value>Category of the message for a specific use case. Possible values:  - &#x60;01&#x60;: PA- payment authentication - &#x60;02&#x60;: NPA- non-payment authentication - &#x60;03-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use </value>
        [DataMember(Name="messageCategory", EmitDefaultValue=false)]
        public string MessageCategory { get; set; }

        /// <summary>
        /// Non-Payer Authentication Indicator. Possible values: - &#x60;01&#x60;: Add card - &#x60;02&#x60;: Maintain card information - &#x60;03&#x60;: Cardholder verification for EMV token - &#x60;04-80&#x60; Reserved for EMVCo - &#x60;80-90&#x60; Reserved DS 
        /// </summary>
        /// <value>Non-Payer Authentication Indicator. Possible values: - &#x60;01&#x60;: Add card - &#x60;02&#x60;: Maintain card information - &#x60;03&#x60;: Cardholder verification for EMV token - &#x60;04-80&#x60; Reserved for EMVCo - &#x60;80-90&#x60; Reserved DS </value>
        [DataMember(Name="npaCode", EmitDefaultValue=false)]
        public string NpaCode { get; set; }

        /// <summary>
        /// Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - &#x60;NA&#x60;: Not applicable. Do not override other payment types that are specified in the request. - &#x60;CR&#x60;: Credit card. - &#x60;DB&#x60;: Debit card. - &#x60;VSAVR&#x60;: Visa Vale Refeicao - &#x60;VSAVA&#x60;: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
        /// </summary>
        /// <value>Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - &#x60;NA&#x60;: Not applicable. Do not override other payment types that are specified in the request. - &#x60;CR&#x60;: Credit card. - &#x60;DB&#x60;: Debit card. - &#x60;VSAVR&#x60;: Visa Vale Refeicao - &#x60;VSAVA&#x60;: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. </value>
        [DataMember(Name="overridePaymentMethod", EmitDefaultValue=false)]
        public string OverridePaymentMethod { get; set; }

        /// <summary>
        /// Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - &#x60;ACC&#x60;: Accommodation Rental - &#x60;ACF&#x60;: Account funding - &#x60;CHA&#x60;: Check acceptance - &#x60;DIG&#x60;: Digital Goods - &#x60;DSP&#x60;: Cash Dispensing - &#x60;GAS&#x60;: Fuel - &#x60;GEN&#x60;: General Retail - &#x60;LUX&#x60;: Luxury Retail - &#x60;PAL&#x60;: Prepaid activation and load - &#x60;PHY&#x60;: Goods or services purchase - &#x60;QCT&#x60;: Quasi-cash transaction - &#x60;REN&#x60;: Car Rental - &#x60;RES&#x60;: Restaurant - &#x60;SVC&#x60;: Services - &#x60;TBD&#x60;: Other - &#x60;TRA&#x60;: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
        /// </summary>
        /// <value>Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - &#x60;ACC&#x60;: Accommodation Rental - &#x60;ACF&#x60;: Account funding - &#x60;CHA&#x60;: Check acceptance - &#x60;DIG&#x60;: Digital Goods - &#x60;DSP&#x60;: Cash Dispensing - &#x60;GAS&#x60;: Fuel - &#x60;GEN&#x60;: General Retail - &#x60;LUX&#x60;: Luxury Retail - &#x60;PAL&#x60;: Prepaid activation and load - &#x60;PHY&#x60;: Goods or services purchase - &#x60;QCT&#x60;: Quasi-cash transaction - &#x60;REN&#x60;: Car Rental - &#x60;RES&#x60;: Restaurant - &#x60;SVC&#x60;: Services - &#x60;TBD&#x60;: Other - &#x60;TRA&#x60;: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. </value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Cardinal&#39;s directory server assigned 3DS Requestor ID value
        /// </summary>
        /// <value>Cardinal&#39;s directory server assigned 3DS Requestor ID value</value>
        [DataMember(Name="requestorId", EmitDefaultValue=false)]
        public string RequestorId { get; set; }

        /// <summary>
        /// Cardinal&#39;s directory server assigned 3DS Requestor Name value
        /// </summary>
        /// <value>Cardinal&#39;s directory server assigned 3DS Requestor Name value</value>
        [DataMember(Name="requestorName", EmitDefaultValue=false)]
        public string RequestorName { get; set; }

        /// <summary>
        /// Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration. 
        /// </summary>
        /// <value>Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration. </value>
        [DataMember(Name="referenceId", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values: - &#x60;MOTO&#x60; - MOTO (Mail Order Telephone Order) - &#x60;RETAIL&#x60; - Retail - &#x60;ECOMMERCE&#x60; - eCommerce - &#x60;MOBILE&#x60; - Mobile Device - &#x60;TABLET&#x60; - Tablet 
        /// </summary>
        /// <value>Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values: - &#x60;MOTO&#x60; - MOTO (Mail Order Telephone Order) - &#x60;RETAIL&#x60; - Retail - &#x60;ECOMMERCE&#x60; - eCommerce - &#x60;MOBILE&#x60; - Mobile Device - &#x60;TABLET&#x60; - Tablet </value>
        [DataMember(Name="transactionMode", EmitDefaultValue=false)]
        public string TransactionMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Riskv1authenticationsConsumerAuthenticationInformation {\n");
            sb.Append("  AlternateAuthenticationData: ").Append(AlternateAuthenticationData).Append("\n");
            sb.Append("  AlternateAuthenticationDate: ").Append(AlternateAuthenticationDate).Append("\n");
            sb.Append("  AlternateAuthenticationMethod: ").Append(AlternateAuthenticationMethod).Append("\n");
            sb.Append("  AuthenticationTransactionId: ").Append(AuthenticationTransactionId).Append("\n");
            sb.Append("  ChallengeCode: ").Append(ChallengeCode).Append("\n");
            sb.Append("  CustomerCardAlias: ").Append(CustomerCardAlias).Append("\n");
            sb.Append("  DefaultCard: ").Append(DefaultCard).Append("\n");
            sb.Append("  InstallmentTotalCount: ").Append(InstallmentTotalCount).Append("\n");
            sb.Append("  MarketingOptIn: ").Append(MarketingOptIn).Append("\n");
            sb.Append("  MarketingSource: ").Append(MarketingSource).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  MessageCategory: ").Append(MessageCategory).Append("\n");
            sb.Append("  NpaCode: ").Append(NpaCode).Append("\n");
            sb.Append("  OverridePaymentMethod: ").Append(OverridePaymentMethod).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  RequestorId: ").Append(RequestorId).Append("\n");
            sb.Append("  RequestorName: ").Append(RequestorName).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  TransactionMode: ").Append(TransactionMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Riskv1authenticationsConsumerAuthenticationInformation);
        }

        /// <summary>
        /// Returns true if Riskv1authenticationsConsumerAuthenticationInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Riskv1authenticationsConsumerAuthenticationInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Riskv1authenticationsConsumerAuthenticationInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AlternateAuthenticationData == other.AlternateAuthenticationData ||
                    this.AlternateAuthenticationData != null &&
                    this.AlternateAuthenticationData.Equals(other.AlternateAuthenticationData)
                ) && 
                (
                    this.AlternateAuthenticationDate == other.AlternateAuthenticationDate ||
                    this.AlternateAuthenticationDate != null &&
                    this.AlternateAuthenticationDate.Equals(other.AlternateAuthenticationDate)
                ) && 
                (
                    this.AlternateAuthenticationMethod == other.AlternateAuthenticationMethod ||
                    this.AlternateAuthenticationMethod != null &&
                    this.AlternateAuthenticationMethod.Equals(other.AlternateAuthenticationMethod)
                ) && 
                (
                    this.AuthenticationTransactionId == other.AuthenticationTransactionId ||
                    this.AuthenticationTransactionId != null &&
                    this.AuthenticationTransactionId.Equals(other.AuthenticationTransactionId)
                ) && 
                (
                    this.ChallengeCode == other.ChallengeCode ||
                    this.ChallengeCode != null &&
                    this.ChallengeCode.Equals(other.ChallengeCode)
                ) && 
                (
                    this.CustomerCardAlias == other.CustomerCardAlias ||
                    this.CustomerCardAlias != null &&
                    this.CustomerCardAlias.Equals(other.CustomerCardAlias)
                ) && 
                (
                    this.DefaultCard == other.DefaultCard ||
                    this.DefaultCard != null &&
                    this.DefaultCard.Equals(other.DefaultCard)
                ) && 
                (
                    this.InstallmentTotalCount == other.InstallmentTotalCount ||
                    this.InstallmentTotalCount != null &&
                    this.InstallmentTotalCount.Equals(other.InstallmentTotalCount)
                ) && 
                (
                    this.MarketingOptIn == other.MarketingOptIn ||
                    this.MarketingOptIn != null &&
                    this.MarketingOptIn.Equals(other.MarketingOptIn)
                ) && 
                (
                    this.MarketingSource == other.MarketingSource ||
                    this.MarketingSource != null &&
                    this.MarketingSource.Equals(other.MarketingSource)
                ) && 
                (
                    this.Mcc == other.Mcc ||
                    this.Mcc != null &&
                    this.Mcc.Equals(other.Mcc)
                ) && 
                (
                    this.MessageCategory == other.MessageCategory ||
                    this.MessageCategory != null &&
                    this.MessageCategory.Equals(other.MessageCategory)
                ) && 
                (
                    this.NpaCode == other.NpaCode ||
                    this.NpaCode != null &&
                    this.NpaCode.Equals(other.NpaCode)
                ) && 
                (
                    this.OverridePaymentMethod == other.OverridePaymentMethod ||
                    this.OverridePaymentMethod != null &&
                    this.OverridePaymentMethod.Equals(other.OverridePaymentMethod)
                ) && 
                (
                    this.ProductCode == other.ProductCode ||
                    this.ProductCode != null &&
                    this.ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    this.RequestorId == other.RequestorId ||
                    this.RequestorId != null &&
                    this.RequestorId.Equals(other.RequestorId)
                ) && 
                (
                    this.RequestorName == other.RequestorName ||
                    this.RequestorName != null &&
                    this.RequestorName.Equals(other.RequestorName)
                ) && 
                (
                    this.ReferenceId == other.ReferenceId ||
                    this.ReferenceId != null &&
                    this.ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    this.TransactionMode == other.TransactionMode ||
                    this.TransactionMode != null &&
                    this.TransactionMode.Equals(other.TransactionMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AlternateAuthenticationData != null)
                    hash = hash * 59 + this.AlternateAuthenticationData.GetHashCode();
                if (this.AlternateAuthenticationDate != null)
                    hash = hash * 59 + this.AlternateAuthenticationDate.GetHashCode();
                if (this.AlternateAuthenticationMethod != null)
                    hash = hash * 59 + this.AlternateAuthenticationMethod.GetHashCode();
                if (this.AuthenticationTransactionId != null)
                    hash = hash * 59 + this.AuthenticationTransactionId.GetHashCode();
                if (this.ChallengeCode != null)
                    hash = hash * 59 + this.ChallengeCode.GetHashCode();
                if (this.CustomerCardAlias != null)
                    hash = hash * 59 + this.CustomerCardAlias.GetHashCode();
                if (this.DefaultCard != null)
                    hash = hash * 59 + this.DefaultCard.GetHashCode();
                if (this.InstallmentTotalCount != null)
                    hash = hash * 59 + this.InstallmentTotalCount.GetHashCode();
                if (this.MarketingOptIn != null)
                    hash = hash * 59 + this.MarketingOptIn.GetHashCode();
                if (this.MarketingSource != null)
                    hash = hash * 59 + this.MarketingSource.GetHashCode();
                if (this.Mcc != null)
                    hash = hash * 59 + this.Mcc.GetHashCode();
                if (this.MessageCategory != null)
                    hash = hash * 59 + this.MessageCategory.GetHashCode();
                if (this.NpaCode != null)
                    hash = hash * 59 + this.NpaCode.GetHashCode();
                if (this.OverridePaymentMethod != null)
                    hash = hash * 59 + this.OverridePaymentMethod.GetHashCode();
                if (this.ProductCode != null)
                    hash = hash * 59 + this.ProductCode.GetHashCode();
                if (this.RequestorId != null)
                    hash = hash * 59 + this.RequestorId.GetHashCode();
                if (this.RequestorName != null)
                    hash = hash * 59 + this.RequestorName.GetHashCode();
                if (this.ReferenceId != null)
                    hash = hash * 59 + this.ReferenceId.GetHashCode();
                if (this.TransactionMode != null)
                    hash = hash * 59 + this.TransactionMode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AlternateAuthenticationData (string) maxLength
            if(this.AlternateAuthenticationData != null && this.AlternateAuthenticationData.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AlternateAuthenticationData, length must be less than 2048.", new [] { "AlternateAuthenticationData" });
            }

            // AlternateAuthenticationDate (string) maxLength
            if(this.AlternateAuthenticationDate != null && this.AlternateAuthenticationDate.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AlternateAuthenticationDate, length must be less than 14.", new [] { "AlternateAuthenticationDate" });
            }

            // AuthenticationTransactionId (string) maxLength
            if(this.AuthenticationTransactionId != null && this.AuthenticationTransactionId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthenticationTransactionId, length must be less than 20.", new [] { "AuthenticationTransactionId" });
            }

            // CustomerCardAlias (string) maxLength
            if(this.CustomerCardAlias != null && this.CustomerCardAlias.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerCardAlias, length must be less than 128.", new [] { "CustomerCardAlias" });
            }

            // MarketingSource (string) maxLength
            if(this.MarketingSource != null && this.MarketingSource.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MarketingSource, length must be less than 40.", new [] { "MarketingSource" });
            }

            // Mcc (string) maxLength
            if(this.Mcc != null && this.Mcc.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mcc, length must be less than 4.", new [] { "Mcc" });
            }

            // NpaCode (string) maxLength
            if(this.NpaCode != null && this.NpaCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NpaCode, length must be less than 2.", new [] { "NpaCode" });
            }

            // ProductCode (string) maxLength
            if(this.ProductCode != null && this.ProductCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductCode, length must be less than 3.", new [] { "ProductCode" });
            }

            // RequestorId (string) maxLength
            if(this.RequestorId != null && this.RequestorId.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestorId, length must be less than 35.", new [] { "RequestorId" });
            }

            // RequestorName (string) maxLength
            if(this.RequestorName != null && this.RequestorName.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestorName, length must be less than 40.", new [] { "RequestorName" });
            }

            // ReferenceId (string) maxLength
            if(this.ReferenceId != null && this.ReferenceId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferenceId, length must be less than 50.", new [] { "ReferenceId" });
            }

            yield break;
        }
    }

}
