/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// Riskv1authenticationexemptionsMerchantInformation
    /// </summary>
    [DataContract]
    public partial class Riskv1authenticationexemptionsMerchantInformation :  IEquatable<Riskv1authenticationexemptionsMerchantInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Riskv1authenticationexemptionsMerchantInformation" /> class.
        /// </summary>
        /// <param name="VisaMerchantId">Network assigned merchant identifier. .</param>
        /// <param name="CardAcceptorId">Card Acceptor ID (CAID) for the current transaction. .</param>
        /// <param name="MerchantCategoryCode">Merchant Category Code (MCC). 4 digit numeric. .</param>
        /// <param name="MerchantDescriptor">MerchantDescriptor.</param>
        public Riskv1authenticationexemptionsMerchantInformation(string VisaMerchantId = default(string), string CardAcceptorId = default(string), string MerchantCategoryCode = default(string), Riskv1authenticationexemptionsMerchantInformationMerchantDescriptor MerchantDescriptor = default(Riskv1authenticationexemptionsMerchantInformationMerchantDescriptor))
        {
            this.VisaMerchantId = VisaMerchantId;
            this.CardAcceptorId = CardAcceptorId;
            this.MerchantCategoryCode = MerchantCategoryCode;
            this.MerchantDescriptor = MerchantDescriptor;
        }
        
        /// <summary>
        /// Network assigned merchant identifier. 
        /// </summary>
        /// <value>Network assigned merchant identifier. </value>
        [DataMember(Name="visaMerchantId", EmitDefaultValue=false)]
        public string VisaMerchantId { get; set; }

        /// <summary>
        /// Card Acceptor ID (CAID) for the current transaction. 
        /// </summary>
        /// <value>Card Acceptor ID (CAID) for the current transaction. </value>
        [DataMember(Name="cardAcceptorId", EmitDefaultValue=false)]
        public string CardAcceptorId { get; set; }

        /// <summary>
        /// Merchant Category Code (MCC). 4 digit numeric. 
        /// </summary>
        /// <value>Merchant Category Code (MCC). 4 digit numeric. </value>
        [DataMember(Name="merchantCategoryCode", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// Gets or Sets MerchantDescriptor
        /// </summary>
        [DataMember(Name="merchantDescriptor", EmitDefaultValue=false)]
        public Riskv1authenticationexemptionsMerchantInformationMerchantDescriptor MerchantDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Riskv1authenticationexemptionsMerchantInformation {\n");
            sb.Append("  VisaMerchantId: ").Append(VisaMerchantId).Append("\n");
            sb.Append("  CardAcceptorId: ").Append(CardAcceptorId).Append("\n");
            sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("  MerchantDescriptor: ").Append(MerchantDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Riskv1authenticationexemptionsMerchantInformation);
        }

        /// <summary>
        /// Returns true if Riskv1authenticationexemptionsMerchantInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of Riskv1authenticationexemptionsMerchantInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Riskv1authenticationexemptionsMerchantInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VisaMerchantId == other.VisaMerchantId ||
                    this.VisaMerchantId != null &&
                    this.VisaMerchantId.Equals(other.VisaMerchantId)
                ) && 
                (
                    this.CardAcceptorId == other.CardAcceptorId ||
                    this.CardAcceptorId != null &&
                    this.CardAcceptorId.Equals(other.CardAcceptorId)
                ) && 
                (
                    this.MerchantCategoryCode == other.MerchantCategoryCode ||
                    this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(other.MerchantCategoryCode)
                ) && 
                (
                    this.MerchantDescriptor == other.MerchantDescriptor ||
                    this.MerchantDescriptor != null &&
                    this.MerchantDescriptor.Equals(other.MerchantDescriptor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VisaMerchantId != null)
                    hash = hash * 59 + this.VisaMerchantId.GetHashCode();
                if (this.CardAcceptorId != null)
                    hash = hash * 59 + this.CardAcceptorId.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hash = hash * 59 + this.MerchantCategoryCode.GetHashCode();
                if (this.MerchantDescriptor != null)
                    hash = hash * 59 + this.MerchantDescriptor.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VisaMerchantId (string) maxLength
            if(this.VisaMerchantId != null && this.VisaMerchantId.Length >= 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VisaMerchantId, length must be less than or equal to 16.", new [] { "VisaMerchantId" });
            }

            // CardAcceptorId (string) maxLength
            if(this.CardAcceptorId != null && this.CardAcceptorId.Length >= 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardAcceptorId, length must be less than or equal to 15.", new [] { "CardAcceptorId" });
            }

            // MerchantCategoryCode (string) maxLength
            if(this.MerchantCategoryCode != null && this.MerchantCategoryCode.Length >= 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantCategoryCode, length must be less than or equal to 20.", new [] { "MerchantCategoryCode" });
            }

            yield break;
        }
    }

}
