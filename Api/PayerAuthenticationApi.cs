/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CyberSource.Client;
using CyberSource.Model;

namespace CyberSource.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayerAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check payer auth enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>RiskV1AuthenticationsPost201Response</returns>
        RiskV1AuthenticationsPost201Response CheckPayerAuthEnrollment (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);

        /// <summary>
        /// Check payer auth enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationsPost201Response</returns>
        ApiResponse<RiskV1AuthenticationsPost201Response> CheckPayerAuthEnrollmentWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);
        /// <summary>
        /// Validate authentication results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>RiskV1AuthenticationResultsPost201Response</returns>
        RiskV1AuthenticationResultsPost201Response ValidateAuthenticationResults (ValidateRequest validateRequest);

        /// <summary>
        /// Validate authentication results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationResultsPost201Response</returns>
        ApiResponse<RiskV1AuthenticationResultsPost201Response> ValidateAuthenticationResultsWithHttpInfo (ValidateRequest validateRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check payer auth enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of RiskV1AuthenticationsPost201Response</returns>
        System.Threading.Tasks.Task<RiskV1AuthenticationsPost201Response> CheckPayerAuthEnrollmentAsync (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);

        /// <summary>
        /// Check payer auth enrollment
        /// </summary>
        /// <remarks>
        /// This call verifies that the card is enrolled in a card authentication program.
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationsPost201Response>> CheckPayerAuthEnrollmentAsyncWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest);
        /// <summary>
        /// Validate authentication results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of RiskV1AuthenticationResultsPost201Response</returns>
        System.Threading.Tasks.Task<RiskV1AuthenticationResultsPost201Response> ValidateAuthenticationResultsAsync (ValidateRequest validateRequest);

        /// <summary>
        /// Validate authentication results
        /// </summary>
        /// <remarks>
        /// This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </remarks>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationResultsPost201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationResultsPost201Response>> ValidateAuthenticationResultsAsyncWithHttpInfo (ValidateRequest validateRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayerAuthenticationApi : IPayerAuthenticationApi
    {
        private CyberSource.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayerAuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayerAuthenticationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayerAuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayerAuthenticationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CyberSource.Client.Configuration.DefaultExceptionFactory;

            this.Configuration.ApiClient.Configuration = this.Configuration;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CyberSource.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check payer auth enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>RiskV1AuthenticationsPost201Response</returns>
        public RiskV1AuthenticationsPost201Response CheckPayerAuthEnrollment (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
             ApiResponse<RiskV1AuthenticationsPost201Response> localVarResponse = CheckPayerAuthEnrollmentWithHttpInfo(checkPayerAuthEnrollmentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check payer auth enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationsPost201Response</returns>
        public ApiResponse< RiskV1AuthenticationsPost201Response > CheckPayerAuthEnrollmentWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
            // verify the required parameter 'checkPayerAuthEnrollmentRequest' is set
            if (checkPayerAuthEnrollmentRequest == null)
                throw new ApiException(400, "Missing required parameter 'checkPayerAuthEnrollmentRequest' when calling PayerAuthenticationApi->CheckPayerAuthEnrollment");

            var localVarPath = $"/risk/v1/authentications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkPayerAuthEnrollmentRequest != null && checkPayerAuthEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkPayerAuthEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPayerAuthEnrollmentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPayerAuthEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiskV1AuthenticationsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationsPost201Response)));
        }

        /// <summary>
        /// Check payer auth enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of RiskV1AuthenticationsPost201Response</returns>
        public async System.Threading.Tasks.Task<RiskV1AuthenticationsPost201Response> CheckPayerAuthEnrollmentAsync (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
             ApiResponse<RiskV1AuthenticationsPost201Response> localVarResponse = await CheckPayerAuthEnrollmentAsyncWithHttpInfo(checkPayerAuthEnrollmentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check payer auth enrollment This call verifies that the card is enrolled in a card authentication program.
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPayerAuthEnrollmentRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationsPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationsPost201Response>> CheckPayerAuthEnrollmentAsyncWithHttpInfo (CheckPayerAuthEnrollmentRequest checkPayerAuthEnrollmentRequest)
        {
            // verify the required parameter 'checkPayerAuthEnrollmentRequest' is set
            if (checkPayerAuthEnrollmentRequest == null)
                throw new ApiException(400, "Missing required parameter 'checkPayerAuthEnrollmentRequest' when calling PayerAuthenticationApi->CheckPayerAuthEnrollment");

            var localVarPath = $"/risk/v1/authentications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkPayerAuthEnrollmentRequest != null && checkPayerAuthEnrollmentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkPayerAuthEnrollmentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPayerAuthEnrollmentRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPayerAuthEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiskV1AuthenticationsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationsPost201Response)));
        }

        /// <summary>
        /// Validate authentication results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>RiskV1AuthenticationResultsPost201Response</returns>
        public RiskV1AuthenticationResultsPost201Response ValidateAuthenticationResults (ValidateRequest validateRequest)
        {
             ApiResponse<RiskV1AuthenticationResultsPost201Response> localVarResponse = ValidateAuthenticationResultsWithHttpInfo(validateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate authentication results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>ApiResponse of RiskV1AuthenticationResultsPost201Response</returns>
        public ApiResponse< RiskV1AuthenticationResultsPost201Response > ValidateAuthenticationResultsWithHttpInfo (ValidateRequest validateRequest)
        {
            // verify the required parameter 'validateRequest' is set
            if (validateRequest == null)
                throw new ApiException(400, "Missing required parameter 'validateRequest' when calling PayerAuthenticationApi->ValidateAuthenticationResults");

            var localVarPath = $"/risk/v1/authentication-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateRequest != null && validateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAuthenticationResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiskV1AuthenticationResultsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationResultsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationResultsPost201Response)));
        }

        /// <summary>
        /// Validate authentication results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of RiskV1AuthenticationResultsPost201Response</returns>
        public async System.Threading.Tasks.Task<RiskV1AuthenticationResultsPost201Response> ValidateAuthenticationResultsAsync (ValidateRequest validateRequest)
        {
             ApiResponse<RiskV1AuthenticationResultsPost201Response> localVarResponse = await ValidateAuthenticationResultsAsyncWithHttpInfo(validateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate authentication results This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment. 
        /// </summary>
        /// <exception cref="CyberSource.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateRequest"></param>
        /// <returns>Task of ApiResponse (RiskV1AuthenticationResultsPost201Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RiskV1AuthenticationResultsPost201Response>> ValidateAuthenticationResultsAsyncWithHttpInfo (ValidateRequest validateRequest)
        {
            // verify the required parameter 'validateRequest' is set
            if (validateRequest == null)
                throw new ApiException(400, "Missing required parameter 'validateRequest' when calling PayerAuthenticationApi->ValidateAuthenticationResults");

            var localVarPath = $"/risk/v1/authentication-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json;charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateRequest != null && validateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(validateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAuthenticationResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiskV1AuthenticationResultsPost201Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RiskV1AuthenticationResultsPost201Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskV1AuthenticationResultsPost201Response)));
        }

    }
}
